
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ FOR GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID ASSIGN expression SEMICOLON\n                      | type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INT\n                     | CHAR\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOIDparam_list : param\n                 | param_list COMMA paramparam : type_specifier ID\n            | type_specifier ID LBRACKET RBRACKETcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmt\n                | while_stmt\n                | for_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementfor_stmt : FOR LPAREN expression_stmt expression_stmt expression RPAREN statementexpression : var ASSIGN expression\n                 | simple_expressionvar : ID\n           | ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expression\n                        | additive_expressionrelop : LE\n             | LT\n             | GT\n             | GE\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                          | termaddop : PLUS\n             | MINUSmulop : TIMES\n             | DIVIDEterm : term mulop factor\n            | factorfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBER\n              | CHAR_LITERALcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,12,15,35,54,66,68,69,75,76,79,82,],[7,7,-2,-4,-5,-3,-6,7,-7,7,-8,-12,-68,7,-20,-21,-19,]),'CHAR':([0,2,3,4,5,10,12,15,35,54,66,68,69,75,76,79,82,],[8,8,-2,-4,-5,-3,-6,8,-7,8,-8,-12,-68,8,-20,-21,-19,]),'VOID':([0,2,3,4,5,10,12,15,35,54,66,68,69,75,76,79,82,],[9,9,-2,-4,-5,-3,-6,31,-7,9,-8,-12,-68,9,-20,-21,-19,]),'$end':([1,2,3,4,5,10,12,35,66,68,82,],[0,-1,-2,-4,-5,-3,-6,-7,-8,-12,-19,]),'ID':([6,7,8,9,12,13,23,28,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,66,69,73,75,76,78,79,80,81,82,83,84,85,86,87,88,89,91,92,97,98,100,101,102,103,106,107,108,109,110,111,113,114,115,116,],[11,-9,-10,-11,-6,16,16,52,-11,16,16,-7,16,16,16,-44,-45,-46,-47,-48,-49,-52,-53,16,-54,-55,-8,-68,16,-68,-20,16,-21,-22,96,-19,-23,-24,-25,-26,-27,-28,-29,-31,16,-30,-32,16,16,16,-33,16,16,16,16,-34,-36,16,16,-35,-37,]),'SEMICOLON':([11,12,16,17,18,19,20,21,22,24,25,26,35,51,60,61,62,63,64,65,66,69,71,72,75,76,78,79,80,82,83,84,85,86,87,88,89,90,91,92,96,97,98,99,102,103,106,107,108,110,111,113,114,115,116,],[12,-6,-40,35,-59,-39,-43,-51,-57,-60,-61,-62,-7,66,-38,-42,-59,-50,-56,-58,-8,-68,-41,-63,-68,-20,91,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,97,-31,98,12,-30,-32,103,91,-33,91,91,91,-34,-36,91,91,-35,-37,]),'ASSIGN':([11,16,18,71,96,],[13,-40,36,-41,13,]),'LBRACKET':([11,16,52,96,],[14,33,67,14,]),'LPAREN':([11,12,13,16,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,66,69,73,75,76,78,79,80,82,83,84,85,86,87,88,89,91,92,93,94,95,97,98,100,101,102,103,106,107,108,109,110,111,113,114,115,116,],[15,-6,23,34,23,23,23,-7,23,23,23,-44,-45,-46,-47,-48,-49,-52,-53,23,-54,-55,-8,-68,23,-68,-20,23,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,23,100,101,102,-30,-32,23,23,23,-33,23,23,23,23,-34,-36,23,23,-35,-37,]),'RBRACE':([12,35,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,110,111,115,116,],[-6,-7,-8,-68,-68,-20,82,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,-34,-36,-35,-37,]),'LBRACE':([12,35,53,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,107,108,110,111,113,114,115,116,],[-6,-7,69,-8,-68,-68,-20,69,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,69,69,-34,-36,69,69,-35,-37,]),'RETURN':([12,35,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,107,108,110,111,113,114,115,116,],[-6,-7,-8,-68,-68,-20,92,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,92,92,-34,-36,92,92,-35,-37,]),'IF':([12,35,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,107,108,110,111,113,114,115,116,],[-6,-7,-8,-68,-68,-20,93,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,93,93,-34,-36,93,93,-35,-37,]),'WHILE':([12,35,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,107,108,110,111,113,114,115,116,],[-6,-7,-8,-68,-68,-20,94,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,94,94,-34,-36,94,94,-35,-37,]),'FOR':([12,35,66,69,75,76,78,79,80,82,83,84,85,86,87,88,89,91,97,98,103,107,108,110,111,113,114,115,116,],[-6,-7,-8,-68,-68,-20,95,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,95,95,-34,-36,95,95,-35,-37,]),'NUMBER':([12,13,14,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,66,69,73,75,76,78,79,80,82,83,84,85,86,87,88,89,91,92,97,98,100,101,102,103,106,107,108,109,110,111,113,114,115,116,],[-6,25,27,25,25,25,-7,25,25,25,-44,-45,-46,-47,-48,-49,-52,-53,25,-54,-55,-8,-68,25,-68,-20,25,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,25,-30,-32,25,25,25,-33,25,25,25,25,-34,-36,25,25,-35,-37,]),'CHAR_LITERAL':([12,13,23,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,66,69,73,75,76,78,79,80,82,83,84,85,86,87,88,89,91,92,97,98,100,101,102,103,106,107,108,109,110,111,113,114,115,116,],[-6,26,26,26,26,-7,26,26,26,-44,-45,-46,-47,-48,-49,-52,-53,26,-54,-55,-8,-68,26,-68,-20,26,-21,-22,-19,-23,-24,-25,-26,-27,-28,-29,-31,26,-30,-32,26,26,26,-33,26,26,26,26,-34,-36,26,26,-35,-37,]),'TIMES':([16,18,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,48,-57,-60,-61,-62,-59,48,-56,-58,-41,-63,]),'DIVIDE':([16,18,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,49,-57,-60,-61,-62,-59,49,-56,-58,-41,-63,]),'LE':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,39,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'LT':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,40,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'GT':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,41,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'GE':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,42,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'EQ':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,43,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'NE':([16,18,20,21,22,24,25,26,62,63,64,65,71,72,],[-40,-59,44,-51,-57,-60,-61,-62,-59,-50,-56,-58,-41,-63,]),'PLUS':([16,18,20,21,22,24,25,26,61,62,63,64,65,71,72,],[-40,-59,45,-51,-57,-60,-61,-62,45,-59,-50,-56,-58,-41,-63,]),'MINUS':([16,18,20,21,22,24,25,26,61,62,63,64,65,71,72,],[-40,-59,46,-51,-57,-60,-61,-62,46,-59,-50,-56,-58,-41,-63,]),'RPAREN':([16,18,19,20,21,22,24,25,26,29,30,31,32,34,50,52,56,57,58,59,60,61,62,63,64,65,70,71,72,74,77,104,105,112,],[-40,-59,-39,-43,-51,-57,-60,-61,-62,53,-13,-14,-15,-68,65,-17,72,-64,-65,-66,-38,-42,-59,-50,-56,-58,-16,-41,-63,-18,-67,107,108,114,]),'RBRACKET':([16,18,19,20,21,22,24,25,26,27,55,60,61,62,63,64,65,67,71,72,],[-40,-59,-39,-43,-51,-57,-60,-61,-62,51,71,-38,-42,-59,-50,-56,-58,74,-41,-63,]),'COMMA':([16,18,19,20,21,22,24,25,26,30,32,52,57,59,60,61,62,63,64,65,70,71,72,74,77,],[-40,-59,-39,-43,-51,-57,-60,-61,-62,54,-15,-17,73,-66,-38,-42,-59,-50,-56,-58,-16,-41,-63,-18,-67,]),'ELSE':([82,84,85,86,87,88,89,91,97,98,103,110,111,115,116,],[-19,-24,-25,-26,-27,-28,-29,-31,-30,-32,-33,113,-36,-35,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,75,],[4,4,79,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,15,54,75,],[6,6,28,28,81,]),'expression':([13,23,33,34,36,73,78,92,100,101,102,106,107,108,109,113,114,],[17,50,55,59,60,77,90,99,104,105,90,90,90,90,112,90,90,]),'var':([13,23,33,34,36,37,38,47,73,78,92,100,101,102,106,107,108,109,113,114,],[18,18,18,18,18,62,62,62,18,18,18,18,18,18,18,18,18,18,18,18,]),'simple_expression':([13,23,33,34,36,73,78,92,100,101,102,106,107,108,109,113,114,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'additive_expression':([13,23,33,34,36,37,73,78,92,100,101,102,106,107,108,109,113,114,],[20,20,20,20,20,61,20,20,20,20,20,20,20,20,20,20,20,20,]),'term':([13,23,33,34,36,37,38,73,78,92,100,101,102,106,107,108,109,113,114,],[21,21,21,21,21,21,63,21,21,21,21,21,21,21,21,21,21,21,21,]),'factor':([13,23,33,34,36,37,38,47,73,78,92,100,101,102,106,107,108,109,113,114,],[22,22,22,22,22,22,22,64,22,22,22,22,22,22,22,22,22,22,22,22,]),'call':([13,23,33,34,36,37,38,47,73,78,92,100,101,102,106,107,108,109,113,114,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'params':([15,],[29,]),'param_list':([15,],[30,]),'param':([15,54,],[32,70,]),'relop':([20,],[37,]),'addop':([20,61,],[38,38,]),'mulop':([21,63,],[47,47,]),'args':([34,],[56,]),'arg_list':([34,],[57,]),'empty':([34,69,75,],[58,76,80,]),'compound_stmt':([53,78,107,108,113,114,],[68,85,85,85,85,85,]),'local_declarations':([69,],[75,]),'statement_list':([75,],[78,]),'statement':([78,107,108,113,114,],[83,110,111,115,116,]),'expression_stmt':([78,102,106,107,108,113,114,],[84,106,109,84,84,84,84,]),'return_stmt':([78,107,108,113,114,],[86,86,86,86,86,]),'if_stmt':([78,107,108,113,114,],[87,87,87,87,87,]),'while_stmt':([78,107,108,113,114,],[88,88,88,88,88,]),'for_stmt':([78,107,108,113,114,],[89,89,89,89,89,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',24),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','parser.py',25),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',34),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',35),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',36),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',40),
  ('params -> param_list','params',1,'p_params','parser.py',44),
  ('params -> VOID','params',1,'p_params','parser.py',45),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',52),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',53),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',60),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','parser.py',61),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',68),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',72),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',73),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',80),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',81),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',88),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',89),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',92),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',93),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',97),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',98),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',105),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',106),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',113),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',114),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',121),
  ('for_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement','for_stmt',7,'p_for_stmt','parser.py',125),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',129),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',130),
  ('var -> ID','var',1,'p_var','parser.py',137),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','parser.py',138),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',145),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',146),
  ('relop -> LE','relop',1,'p_relop','parser.py',153),
  ('relop -> LT','relop',1,'p_relop','parser.py',154),
  ('relop -> GT','relop',1,'p_relop','parser.py',155),
  ('relop -> GE','relop',1,'p_relop','parser.py',156),
  ('relop -> EQ','relop',1,'p_relop','parser.py',157),
  ('relop -> NE','relop',1,'p_relop','parser.py',158),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',162),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',163),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',170),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',171),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',175),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',176),
  ('term -> term mulop factor','term',3,'p_term','parser.py',180),
  ('term -> factor','term',1,'p_term','parser.py',181),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',188),
  ('factor -> var','factor',1,'p_factor','parser.py',189),
  ('factor -> call','factor',1,'p_factor','parser.py',190),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',191),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',192),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',199),
  ('args -> arg_list','args',1,'p_args','parser.py',203),
  ('args -> empty','args',1,'p_args','parser.py',204),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',208),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',209),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',216),
]
