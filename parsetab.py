
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ GE GT ID IF INT LBRACE LE LPAREN LT MINUS NE NUMBER OR PLUS RBRACE RETURN RPAREN SEMICOLON TIMES VOIDprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID ASSIGN expression SEMICOLONtype_specifier : INT\n                     | CHAR\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOID\n              | emptyparam_list : param\n                 | param_list COMMA paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementexpression : var ASSIGN expression\n                 | logical_or_expressionlogical_or_expression : logical_or_expression OR logical_and_expression\n                            | logical_and_expressionlogical_and_expression : logical_and_expression AND equality_expression\n                             | equality_expressionequality_expression : equality_expression EQ relational_expression\n                          | equality_expression NE relational_expression\n                          | relational_expressionrelational_expression : relational_expression LT additive_expression\n                            | relational_expression LE additive_expression\n                            | relational_expression GT additive_expression\n                            | relational_expression GE additive_expression\n                            | additive_expressionadditive_expression : additive_expression PLUS multiplicative_expression\n                          | additive_expression MINUS multiplicative_expression\n                          | multiplicative_expressionmultiplicative_expression : multiplicative_expression TIMES unary_expression\n                                | multiplicative_expression DIVIDE unary_expression\n                                | unary_expressionunary_expression : factorfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBER\n              | CHAR_LITERALvar : IDcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,12,14,37,54,74,75,79,80,83,86,],[7,7,-2,-4,-5,-3,-6,7,-7,7,-11,-65,7,-19,-20,-18,]),'CHAR':([0,2,3,4,5,10,12,14,37,54,74,75,79,80,83,86,],[8,8,-2,-4,-5,-3,-6,8,-7,8,-11,-65,8,-19,-20,-18,]),'VOID':([0,2,3,4,5,10,12,14,37,54,74,75,79,80,83,86,],[9,9,-2,-4,-5,-3,-6,33,-7,9,-11,-65,9,-19,-20,-18,]),'$end':([1,2,3,4,5,10,12,37,74,86,],[0,-1,-2,-4,-5,-3,-6,-7,-11,-18,]),'ID':([6,7,8,9,12,13,26,30,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,75,78,79,80,82,83,84,85,86,87,88,89,90,91,93,94,97,98,100,101,103,104,105,106,],[11,-8,-9,-10,-6,15,15,52,-10,15,-7,15,15,15,15,15,15,15,15,15,15,15,15,15,-65,15,-65,-19,15,-20,-21,96,-18,-22,-23,-24,-25,-26,-28,15,-27,-29,15,-30,15,-31,15,-32,]),'SEMICOLON':([11,12,15,16,17,18,19,20,21,22,23,24,25,27,28,29,37,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,77,79,80,82,83,84,86,87,88,89,90,91,92,93,94,96,97,98,99,101,103,104,105,106,],[12,-6,-59,37,-55,-34,-36,-38,-41,-46,-49,-52,-53,-56,-57,-58,-7,-33,-35,-55,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-65,-60,-65,-19,93,-20,-21,-18,-22,-23,-24,-25,-26,97,-28,98,12,-27,-29,101,-30,93,-31,93,-32,]),'ASSIGN':([11,15,17,96,],[13,-59,38,13,]),'LPAREN':([11,12,13,15,26,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,75,78,79,80,82,83,84,86,87,88,89,90,91,93,94,95,97,98,100,101,103,104,105,106,],[14,-6,26,36,26,26,-7,26,26,26,26,26,26,26,26,26,26,26,26,26,-65,26,-65,-19,26,-20,-21,-18,-22,-23,-24,-25,-26,-28,26,100,-27,-29,26,-30,26,-31,26,-32,]),'RBRACE':([12,37,75,79,80,82,83,84,86,87,88,89,90,91,93,97,98,101,104,106,],[-6,-7,-65,-65,-19,86,-20,-21,-18,-22,-23,-24,-25,-26,-28,-27,-29,-30,-31,-32,]),'LBRACE':([12,37,53,75,79,80,82,83,84,86,87,88,89,90,91,93,97,98,101,103,104,105,106,],[-6,-7,75,-65,-65,-19,75,-20,-21,-18,-22,-23,-24,-25,-26,-28,-27,-29,-30,75,-31,75,-32,]),'RETURN':([12,37,75,79,80,82,83,84,86,87,88,89,90,91,93,97,98,101,103,104,105,106,],[-6,-7,-65,-65,-19,94,-20,-21,-18,-22,-23,-24,-25,-26,-28,-27,-29,-30,94,-31,94,-32,]),'IF':([12,37,75,79,80,82,83,84,86,87,88,89,90,91,93,97,98,101,103,104,105,106,],[-6,-7,-65,-65,-19,95,-20,-21,-18,-22,-23,-24,-25,-26,-28,-27,-29,-30,95,-31,95,-32,]),'NUMBER':([12,13,26,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,75,78,79,80,82,83,84,86,87,88,89,90,91,93,94,97,98,100,101,103,104,105,106,],[-6,28,28,28,-7,28,28,28,28,28,28,28,28,28,28,28,28,28,-65,28,-65,-19,28,-20,-21,-18,-22,-23,-24,-25,-26,-28,28,-27,-29,28,-30,28,-31,28,-32,]),'CHAR_LITERAL':([12,13,26,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,75,78,79,80,82,83,84,86,87,88,89,90,91,93,94,97,98,100,101,103,104,105,106,],[-6,29,29,29,-7,29,29,29,29,29,29,29,29,29,29,29,29,29,-65,29,-65,-19,29,-20,-21,-18,-22,-23,-24,-25,-26,-28,29,-27,-29,29,-30,29,-31,29,-32,]),'RPAREN':([14,15,17,18,19,20,21,22,23,24,25,27,28,29,31,32,33,34,35,36,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,81,102,],[-65,-59,-55,-34,-36,-38,-41,-46,-49,-52,-53,-56,-57,-58,53,-12,-13,-14,-15,-65,73,-17,77,-61,-62,-63,-33,-35,-55,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-16,-60,-64,103,]),'TIMES':([15,17,23,24,25,27,28,29,61,69,70,71,72,73,77,],[-59,-55,49,-52,-53,-56,-57,-58,-55,49,49,-50,-51,-54,-60,]),'DIVIDE':([15,17,23,24,25,27,28,29,61,69,70,71,72,73,77,],[-59,-55,50,-52,-53,-56,-57,-58,-55,50,50,-50,-51,-54,-60,]),'PLUS':([15,17,22,23,24,25,27,28,29,61,65,66,67,68,69,70,71,72,73,77,],[-59,-55,47,-49,-52,-53,-56,-57,-58,-55,47,47,47,47,-47,-48,-50,-51,-54,-60,]),'MINUS':([15,17,22,23,24,25,27,28,29,61,65,66,67,68,69,70,71,72,73,77,],[-59,-55,48,-49,-52,-53,-56,-57,-58,-55,48,48,48,48,-47,-48,-50,-51,-54,-60,]),'LT':([15,17,21,22,23,24,25,27,28,29,61,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,43,-46,-49,-52,-53,-56,-57,-58,-55,43,43,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'LE':([15,17,21,22,23,24,25,27,28,29,61,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,44,-46,-49,-52,-53,-56,-57,-58,-55,44,44,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'GT':([15,17,21,22,23,24,25,27,28,29,61,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,45,-46,-49,-52,-53,-56,-57,-58,-55,45,45,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'GE':([15,17,21,22,23,24,25,27,28,29,61,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,46,-46,-49,-52,-53,-56,-57,-58,-55,46,46,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'EQ':([15,17,20,21,22,23,24,25,27,28,29,61,62,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,41,-41,-46,-49,-52,-53,-56,-57,-58,-55,41,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'NE':([15,17,20,21,22,23,24,25,27,28,29,61,62,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,42,-41,-46,-49,-52,-53,-56,-57,-58,-55,42,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'AND':([15,17,19,20,21,22,23,24,25,27,28,29,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,40,-38,-41,-46,-49,-52,-53,-56,-57,-58,40,-55,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'OR':([15,17,18,19,20,21,22,23,24,25,27,28,29,60,61,62,63,64,65,66,67,68,69,70,71,72,73,77,],[-59,-55,39,-36,-38,-41,-46,-49,-52,-53,-56,-57,-58,-35,-55,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-60,]),'COMMA':([15,17,18,19,20,21,22,23,24,25,27,28,29,32,35,52,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,77,81,],[-59,-55,-34,-36,-38,-41,-46,-49,-52,-53,-56,-57,-58,54,-15,-17,78,-63,-33,-35,-55,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-54,-16,-60,-64,]),'ELSE':([86,88,89,90,91,93,97,98,101,104,106,],[-18,-23,-24,-25,-26,-28,-27,-29,-30,105,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,79,],[4,4,83,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,14,54,79,],[6,6,30,30,85,]),'expression':([13,26,36,38,78,82,94,100,103,105,],[16,51,58,59,81,92,99,102,92,92,]),'var':([13,26,36,38,39,40,41,42,43,44,45,46,47,48,49,50,78,82,94,100,103,105,],[17,17,17,17,61,61,61,61,61,61,61,61,61,61,61,61,17,17,17,17,17,17,]),'logical_or_expression':([13,26,36,38,78,82,94,100,103,105,],[18,18,18,18,18,18,18,18,18,18,]),'logical_and_expression':([13,26,36,38,39,78,82,94,100,103,105,],[19,19,19,19,60,19,19,19,19,19,19,]),'equality_expression':([13,26,36,38,39,40,78,82,94,100,103,105,],[20,20,20,20,20,62,20,20,20,20,20,20,]),'relational_expression':([13,26,36,38,39,40,41,42,78,82,94,100,103,105,],[21,21,21,21,21,21,63,64,21,21,21,21,21,21,]),'additive_expression':([13,26,36,38,39,40,41,42,43,44,45,46,78,82,94,100,103,105,],[22,22,22,22,22,22,22,22,65,66,67,68,22,22,22,22,22,22,]),'multiplicative_expression':([13,26,36,38,39,40,41,42,43,44,45,46,47,48,78,82,94,100,103,105,],[23,23,23,23,23,23,23,23,23,23,23,23,69,70,23,23,23,23,23,23,]),'unary_expression':([13,26,36,38,39,40,41,42,43,44,45,46,47,48,49,50,78,82,94,100,103,105,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,71,72,24,24,24,24,24,24,]),'factor':([13,26,36,38,39,40,41,42,43,44,45,46,47,48,49,50,78,82,94,100,103,105,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call':([13,26,36,38,39,40,41,42,43,44,45,46,47,48,49,50,78,82,94,100,103,105,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'params':([14,],[31,]),'param_list':([14,],[32,]),'empty':([14,36,75,79,],[34,57,80,84,]),'param':([14,54,],[35,76,]),'args':([36,],[55,]),'arg_list':([36,],[56,]),'compound_stmt':([53,82,103,105,],[74,89,89,89,]),'local_declarations':([75,],[79,]),'statement_list':([79,],[82,]),'statement':([82,103,105,],[87,104,106,]),'expression_stmt':([82,103,105,],[88,88,88,]),'return_stmt':([82,103,105,],[90,90,90,]),'if_stmt':([82,103,105,],[91,91,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',31),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',32),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',33),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',37),
  ('params -> param_list','params',1,'p_params','parser.py',41),
  ('params -> VOID','params',1,'p_params','parser.py',42),
  ('params -> empty','params',1,'p_params','parser.py',43),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',52),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',53),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',60),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',64),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',68),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',69),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',76),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',77),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',87),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',91),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',92),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',99),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',100),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',107),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',108),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',115),
  ('expression -> logical_or_expression','expression',1,'p_expression','parser.py',116),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','parser.py',123),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','parser.py',124),
  ('logical_and_expression -> logical_and_expression AND equality_expression','logical_and_expression',3,'p_logical_and_expression','parser.py',131),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','parser.py',132),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','parser.py',139),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','parser.py',140),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','parser.py',141),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','parser.py',148),
  ('relational_expression -> relational_expression LE additive_expression','relational_expression',3,'p_relational_expression','parser.py',149),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','parser.py',150),
  ('relational_expression -> relational_expression GE additive_expression','relational_expression',3,'p_relational_expression','parser.py',151),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','parser.py',152),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',159),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','parser.py',160),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','parser.py',161),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',168),
  ('multiplicative_expression -> multiplicative_expression DIVIDE unary_expression','multiplicative_expression',3,'p_multiplicative_expression','parser.py',169),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','parser.py',170),
  ('unary_expression -> factor','unary_expression',1,'p_unary_expression','parser.py',177),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',181),
  ('factor -> var','factor',1,'p_factor','parser.py',182),
  ('factor -> call','factor',1,'p_factor','parser.py',183),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',184),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',185),
  ('var -> ID','var',1,'p_var','parser.py',192),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',196),
  ('args -> arg_list','args',1,'p_args','parser.py',200),
  ('args -> empty','args',1,'p_args','parser.py',201),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',205),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',206),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',213),
]
