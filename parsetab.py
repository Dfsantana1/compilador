
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COMMA DIVIDE ELSE EQ GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLONtype_specifier : INT\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOIDparam_list : param\n                 | param_list COMMA paramparam : type_specifier ID\n            | type_specifier ID LBRACKET RBRACKETcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmt\n                | while_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementexpression : var ASSIGN expression\n                 | simple_expressionvar : ID\n           | ID LBRACKET expression RBRACKETsimple_expression : additive_expression relop additive_expression\n                        | additive_expressionrelop : LE\n             | LT\n             | GT\n             | GE\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                          | termaddop : PLUS\n             | MINUSmulop : TIMES\n             | DIVIDEterm : term mulop factor\n            | factorfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBERcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,9,11,13,23,24,26,27,30,31,33,36,],[7,7,-2,-4,-5,-3,-6,7,7,-7,-10,-63,7,-18,-19,-17,]),'VOID':([0,2,3,4,5,9,11,13,23,24,26,27,30,31,33,36,],[8,8,-2,-4,-5,-3,-6,18,8,-7,-10,-63,8,-18,-19,-17,]),'$end':([1,2,3,4,5,9,11,24,26,36,],[0,-1,-2,-4,-5,-3,-6,-7,-10,-17,]),'ID':([6,7,8,11,15,18,24,27,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,47,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,95,98,99,100,102,103,],[10,-8,-9,-6,21,-9,-7,-63,-63,-18,51,-19,-20,57,-17,-21,-22,-23,-24,-25,-26,-28,51,51,-27,-29,51,51,51,51,51,51,51,-40,-41,-42,-43,-44,-45,-48,-49,51,-50,-51,-30,51,51,51,-31,-33,51,-32,]),'SEMICOLON':([10,11,20,24,27,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,60,80,82,84,90,91,92,93,94,95,96,97,99,100,102,103,],[11,-6,24,-7,-63,-63,-18,44,-19,-20,-17,-21,-22,-23,-24,-25,-26,58,-28,59,-55,-35,-36,-39,-47,-53,-56,-57,11,-27,-29,80,-30,-54,-34,-38,-55,-46,-52,44,44,-37,-58,-31,-33,44,-32,]),'LBRACKET':([10,21,51,57,],[12,25,65,12,]),'LPAREN':([10,11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,45,46,47,48,51,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,95,98,99,100,102,103,],[13,-6,-7,-63,-63,-18,47,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,47,61,47,63,66,-27,-29,47,47,47,47,47,47,47,-40,-41,-42,-43,-44,-45,-48,-49,47,-50,-51,-30,47,47,47,-31,-33,47,-32,]),'RBRACE':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,59,80,99,100,103,],[-6,-7,-63,-63,-18,36,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,-27,-29,-30,-31,-33,-32,]),'LBRACE':([11,22,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,59,80,94,95,99,100,102,103,],[-6,27,-7,-63,-63,-18,27,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,-27,-29,-30,27,27,-31,-33,27,-32,]),'RETURN':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,59,80,94,95,99,100,102,103,],[-6,-7,-63,-63,-18,45,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,-27,-29,-30,45,45,-31,-33,45,-32,]),'IF':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,59,80,94,95,99,100,102,103,],[-6,-7,-63,-63,-18,46,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,-27,-29,-30,46,46,-31,-33,46,-32,]),'WHILE':([11,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,58,59,80,94,95,99,100,102,103,],[-6,-7,-63,-63,-18,48,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,-27,-29,-30,48,48,-31,-33,48,-32,]),'NUMBER':([11,12,24,27,30,31,32,33,34,36,37,38,39,40,41,42,44,45,47,58,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,94,95,98,99,100,102,103,],[-6,14,-7,-63,-63,-18,56,-19,-20,-17,-21,-22,-23,-24,-25,-26,-28,56,56,-27,-29,56,56,56,56,56,56,56,-40,-41,-42,-43,-44,-45,-48,-49,56,-50,-51,-30,56,56,56,-31,-33,56,-32,]),'RBRACKET':([14,25,49,50,51,52,53,54,55,56,82,84,85,90,91,92,93,96,97,],[20,29,-55,-35,-36,-39,-47,-53,-56,-57,-54,-34,96,-38,-55,-46,-52,-37,-58,]),'RPAREN':([16,17,18,19,21,28,29,49,50,51,52,53,54,55,56,62,66,81,82,83,84,86,87,88,89,90,91,92,93,96,97,101,],[22,-11,-12,-13,-15,-14,-16,-55,-35,-36,-39,-47,-53,-56,-57,82,-63,94,-54,95,-34,97,-59,-60,-61,-38,-55,-46,-52,-37,-58,-62,]),'COMMA':([17,19,21,28,29,49,50,51,52,53,54,55,56,82,84,87,89,90,91,92,93,96,97,101,],[23,-13,-15,-14,-16,-55,-35,-36,-39,-47,-53,-56,-57,-54,-34,98,-61,-38,-55,-46,-52,-37,-58,-62,]),'ELSE':([36,38,39,40,41,42,44,58,59,80,99,100,103,],[-17,-22,-23,-24,-25,-26,-28,-27,-29,-30,102,-33,-32,]),'ASSIGN':([49,51,96,],[64,-36,-37,]),'TIMES':([49,51,53,54,55,56,82,91,92,93,96,97,],[-55,-36,78,-53,-56,-57,-54,-55,78,-52,-37,-58,]),'DIVIDE':([49,51,53,54,55,56,82,91,92,93,96,97,],[-55,-36,79,-53,-56,-57,-54,-55,79,-52,-37,-58,]),'LE':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,69,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'LT':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,70,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'GT':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,71,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'GE':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,72,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'EQ':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,73,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'NE':([49,51,52,53,54,55,56,82,91,92,93,96,97,],[-55,-36,74,-47,-53,-56,-57,-54,-55,-46,-52,-37,-58,]),'PLUS':([49,51,52,53,54,55,56,82,90,91,92,93,96,97,],[-55,-36,75,-47,-53,-56,-57,-54,75,-55,-46,-52,-37,-58,]),'MINUS':([49,51,52,53,54,55,56,82,90,91,92,93,96,97,],[-55,-36,76,-47,-53,-56,-57,-54,76,-55,-46,-52,-37,-58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,9,]),'var_declaration':([0,2,30,],[4,4,33,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,13,23,30,],[6,6,15,15,35,]),'params':([13,],[16,]),'param_list':([13,],[17,]),'param':([13,23,],[19,28,]),'compound_stmt':([22,32,94,95,102,],[26,39,39,39,39,]),'local_declarations':([27,],[30,]),'empty':([27,30,66,],[31,34,88,]),'statement_list':([30,],[32,]),'statement':([32,94,95,102,],[37,99,100,103,]),'expression_stmt':([32,94,95,102,],[38,38,38,38,]),'return_stmt':([32,94,95,102,],[40,40,40,40,]),'if_stmt':([32,94,95,102,],[41,41,41,41,]),'while_stmt':([32,94,95,102,],[42,42,42,42,]),'expression':([32,45,47,61,63,64,65,66,94,95,98,102,],[43,60,62,81,83,84,85,89,43,43,101,43,]),'var':([32,45,47,61,63,64,65,66,67,68,77,94,95,98,102,],[49,49,49,49,49,49,49,49,91,91,91,49,49,49,49,]),'simple_expression':([32,45,47,61,63,64,65,66,94,95,98,102,],[50,50,50,50,50,50,50,50,50,50,50,50,]),'additive_expression':([32,45,47,61,63,64,65,66,67,94,95,98,102,],[52,52,52,52,52,52,52,52,90,52,52,52,52,]),'term':([32,45,47,61,63,64,65,66,67,68,94,95,98,102,],[53,53,53,53,53,53,53,53,53,92,53,53,53,53,]),'factor':([32,45,47,61,63,64,65,66,67,68,77,94,95,98,102,],[54,54,54,54,54,54,54,54,54,54,93,54,54,54,54,]),'call':([32,45,47,61,63,64,65,66,67,68,77,94,95,98,102,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'relop':([52,],[67,]),'addop':([52,90,],[68,68,]),'mulop':([53,92,],[77,77,]),'args':([66,],[86,]),'arg_list':([66,],[87,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID LBRACKET NUMBER RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',31),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',32),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',36),
  ('params -> param_list','params',1,'p_params','parser.py',40),
  ('params -> VOID','params',1,'p_params','parser.py',41),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',48),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',49),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',56),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','parser.py',57),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',64),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',68),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',69),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',76),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',77),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',87),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',88),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',92),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',93),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',100),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',101),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',108),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',109),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',116),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',120),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',121),
  ('var -> ID','var',1,'p_var','parser.py',128),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','parser.py',129),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',136),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',137),
  ('relop -> LE','relop',1,'p_relop','parser.py',144),
  ('relop -> LT','relop',1,'p_relop','parser.py',145),
  ('relop -> GT','relop',1,'p_relop','parser.py',146),
  ('relop -> GE','relop',1,'p_relop','parser.py',147),
  ('relop -> EQ','relop',1,'p_relop','parser.py',148),
  ('relop -> NE','relop',1,'p_relop','parser.py',149),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',153),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',154),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',161),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',162),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',166),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',167),
  ('term -> term mulop factor','term',3,'p_term','parser.py',171),
  ('term -> factor','term',1,'p_term','parser.py',172),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',179),
  ('factor -> var','factor',1,'p_factor','parser.py',180),
  ('factor -> call','factor',1,'p_factor','parser.py',181),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',182),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',189),
  ('args -> arg_list','args',1,'p_args','parser.py',193),
  ('args -> empty','args',1,'p_args','parser.py',194),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',198),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',199),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',206),
]
