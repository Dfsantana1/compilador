
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODULOAND ASSIGN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ FOR GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS MODULO NE NUMBER OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID ASSIGN expression SEMICOLONtype_specifier : INT\n                     | CHAR\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOID\n              | emptyparam_list : param\n                 | param_list COMMA paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmt\n                | while_stmt\n                | for_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementfor_stmt : FOR LPAREN var_declaration expression_stmt expression RPAREN statement\n                | FOR LPAREN expression_stmt expression_stmt expression RPAREN statementexpression : var ASSIGN expression\n                 | simple_expressionvar : IDsimple_expression : additive_expression relop additive_expression\n                        | additive_expressionrelop : LE\n             | LT\n             | GT\n             | GE\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                          | termaddop : PLUS\n             | MINUSterm : term mulop factor\n            | factormulop : TIMES\n             | DIVIDEfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBER\n              | CHAR_LITERALcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULO expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression LE expression\n                  | expression GT expression\n                  | expression GE expression\n                  | expression AND expression\n                  | expression OR expression'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,12,14,33,64,88,89,93,94,97,100,120,],[7,7,-2,-4,-5,-3,-6,7,-7,7,-11,-67,7,-19,-20,-18,7,]),'CHAR':([0,2,3,4,5,10,12,14,33,64,88,89,93,94,97,100,120,],[8,8,-2,-4,-5,-3,-6,8,-7,8,-11,-67,8,-19,-20,-18,8,]),'VOID':([0,2,3,4,5,10,12,14,33,64,88,89,93,94,97,100,120,],[9,9,-2,-4,-5,-3,-6,29,-7,9,-11,-67,9,-19,-20,-18,9,]),'$end':([1,2,3,4,5,10,12,33,88,100,],[0,-1,-2,-4,-5,-3,-6,-7,-11,-18,]),'ID':([6,7,8,9,12,13,22,26,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,89,92,93,94,96,97,98,99,100,101,102,103,104,105,106,107,109,110,115,116,118,119,120,121,124,125,126,127,128,129,130,131,134,135,136,137,138,139,],[11,-8,-9,-10,-6,15,15,62,-10,15,-7,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-43,-44,-45,-46,-47,-48,-51,-52,15,-55,-56,-67,15,-67,-19,15,-20,-21,114,-18,-22,-23,-24,-25,-26,-27,-28,-30,15,-29,-31,15,15,15,-32,15,15,15,15,15,15,-33,-35,15,15,15,-34,-36,-37,]),'SEMICOLON':([11,12,15,16,17,18,19,20,21,23,24,25,33,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91,93,94,96,97,98,100,101,102,103,104,105,106,107,108,109,110,114,115,116,117,120,121,124,125,126,127,130,131,134,135,136,137,138,139,],[12,-6,-40,33,-58,-39,-42,-50,-54,-59,-60,-61,-7,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-38,-41,-58,-49,-53,-57,-67,-62,-67,-19,109,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,115,-30,116,12,-29,-31,121,109,-32,109,109,109,109,-33,-35,109,109,109,-34,-36,-37,]),'ASSIGN':([11,15,17,114,],[13,-40,47,13,]),'LPAREN':([11,12,13,15,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,89,92,93,94,96,97,98,100,101,102,103,104,105,106,107,109,110,111,112,113,115,116,118,119,120,121,124,125,126,127,128,129,130,131,134,135,136,137,138,139,],[14,-6,22,32,22,22,-7,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-43,-44,-45,-46,-47,-48,-51,-52,22,-55,-56,-67,22,-67,-19,22,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,22,118,119,120,-29,-31,22,22,22,-32,22,22,22,22,22,22,-33,-35,22,22,22,-34,-36,-37,]),'RBRACE':([12,33,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,130,131,137,138,139,],[-6,-7,-67,-67,-19,100,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,-33,-35,-34,-36,-37,]),'LBRACE':([12,33,63,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,126,127,130,131,134,135,136,137,138,139,],[-6,-7,89,-67,-67,-19,89,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,89,89,-33,-35,89,89,89,-34,-36,-37,]),'RETURN':([12,33,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,126,127,130,131,134,135,136,137,138,139,],[-6,-7,-67,-67,-19,110,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,110,110,-33,-35,110,110,110,-34,-36,-37,]),'IF':([12,33,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,126,127,130,131,134,135,136,137,138,139,],[-6,-7,-67,-67,-19,111,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,111,111,-33,-35,111,111,111,-34,-36,-37,]),'WHILE':([12,33,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,126,127,130,131,134,135,136,137,138,139,],[-6,-7,-67,-67,-19,112,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,112,112,-33,-35,112,112,112,-34,-36,-37,]),'FOR':([12,33,89,93,94,96,97,98,100,101,102,103,104,105,106,107,109,115,116,121,126,127,130,131,134,135,136,137,138,139,],[-6,-7,-67,-67,-19,113,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,113,113,-33,-35,113,113,113,-34,-36,-37,]),'NUMBER':([12,13,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,89,92,93,94,96,97,98,100,101,102,103,104,105,106,107,109,110,115,116,118,119,120,121,124,125,126,127,128,129,130,131,134,135,136,137,138,139,],[-6,24,24,24,-7,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-43,-44,-45,-46,-47,-48,-51,-52,24,-55,-56,-67,24,-67,-19,24,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,24,-29,-31,24,24,24,-32,24,24,24,24,24,24,-33,-35,24,24,24,-34,-36,-37,]),'CHAR_LITERAL':([12,13,22,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,89,92,93,94,96,97,98,100,101,102,103,104,105,106,107,109,110,115,116,118,119,120,121,124,125,126,127,128,129,130,131,134,135,136,137,138,139,],[-6,25,25,25,-7,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-43,-44,-45,-46,-47,-48,-51,-52,25,-55,-56,-67,25,-67,-19,25,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,25,-29,-31,25,25,25,-32,25,25,25,25,25,25,-33,-35,25,25,25,-34,-36,-37,]),'RPAREN':([14,15,17,18,19,20,21,23,24,25,27,28,29,30,31,32,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,91,95,122,123,132,133,],[-67,-40,-58,-39,-42,-50,-54,-59,-60,-61,63,-12,-13,-14,-15,-67,87,-17,91,-63,-64,-65,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-38,-41,-58,-49,-53,-57,-16,-62,-66,126,127,135,136,]),'TIMES':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,36,-58,-39,-42,59,-54,-59,-60,-61,36,36,36,36,-70,-71,-72,36,36,36,36,36,36,36,36,36,-41,-58,59,-53,-57,-62,36,36,36,36,36,36,36,]),'DIVIDE':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,37,-58,-39,-42,60,-54,-59,-60,-61,37,37,37,37,-70,-71,-72,37,37,37,37,37,37,37,37,37,-41,-58,60,-53,-57,-62,37,37,37,37,37,37,37,]),'LE':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,42,-58,-39,50,-50,-54,-59,-60,-61,42,42,-68,-69,-70,-71,-72,42,42,-75,-76,-77,-78,42,42,42,-41,-58,-49,-53,-57,-62,42,42,42,42,42,42,42,]),'LT':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,41,-58,-39,51,-50,-54,-59,-60,-61,41,41,-68,-69,-70,-71,-72,41,41,-75,-76,-77,-78,41,41,41,-41,-58,-49,-53,-57,-62,41,41,41,41,41,41,41,]),'GT':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,43,-58,-39,52,-50,-54,-59,-60,-61,43,43,-68,-69,-70,-71,-72,43,43,-75,-76,-77,-78,43,43,43,-41,-58,-49,-53,-57,-62,43,43,43,43,43,43,43,]),'GE':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,44,-58,-39,53,-50,-54,-59,-60,-61,44,44,-68,-69,-70,-71,-72,44,44,-75,-76,-77,-78,44,44,44,-41,-58,-49,-53,-57,-62,44,44,44,44,44,44,44,]),'EQ':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,39,-58,-39,54,-50,-54,-59,-60,-61,39,39,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,39,39,39,-41,-58,-49,-53,-57,-62,39,39,39,39,39,39,39,]),'NE':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,40,-58,-39,55,-50,-54,-59,-60,-61,40,40,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,40,40,40,-41,-58,-49,-53,-57,-62,40,40,40,40,40,40,40,]),'PLUS':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,34,-58,-39,56,-50,-54,-59,-60,-61,34,34,-68,-69,-70,-71,-72,34,34,34,34,34,34,34,34,34,56,-58,-49,-53,-57,-62,34,34,34,34,34,34,34,]),'MINUS':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,35,-58,-39,57,-50,-54,-59,-60,-61,35,35,-68,-69,-70,-71,-72,35,35,35,35,35,35,35,35,35,57,-58,-49,-53,-57,-62,35,35,35,35,35,35,35,]),'MODULO':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,38,-58,-39,-42,-50,-54,-59,-60,-61,38,38,38,38,-70,-71,-72,38,38,38,38,38,38,38,38,38,-41,-58,-49,-53,-57,-62,38,38,38,38,38,38,38,]),'AND':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,45,-58,-39,-42,-50,-54,-59,-60,-61,45,45,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,45,45,-41,-58,-49,-53,-57,-62,45,45,45,45,45,45,45,]),'OR':([15,16,17,18,19,20,21,23,24,25,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,95,108,117,122,123,132,133,],[-40,46,-58,-39,-42,-50,-54,-59,-60,-61,46,46,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,46,-41,-58,-49,-53,-57,-62,46,46,46,46,46,46,46,]),'COMMA':([15,17,18,19,20,21,23,24,25,28,31,62,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,91,95,],[-40,-58,-39,-42,-50,-54,-59,-60,-61,64,-15,-17,92,-65,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-38,-41,-58,-49,-53,-57,-16,-62,-66,]),'ELSE':([100,102,103,104,105,106,107,109,115,116,121,130,131,137,138,139,],[-18,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,134,-35,-34,-36,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,93,120,],[4,4,97,124,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,14,64,93,120,],[6,6,26,26,99,99,]),'expression':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[16,61,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,95,108,117,122,123,108,108,108,108,108,132,133,108,108,108,]),'var':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,84,84,84,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'simple_expression':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'additive_expression':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,83,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'term':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,85,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'factor':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,86,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'call':([13,22,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,58,92,96,110,118,119,120,124,125,126,127,128,129,134,135,136,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'params':([14,],[27,]),'param_list':([14,],[28,]),'empty':([14,32,89,93,],[30,67,94,98,]),'param':([14,64,],[31,90,]),'relop':([19,],[48,]),'addop':([19,83,],[49,49,]),'mulop':([20,85,],[58,58,]),'args':([32,],[65,]),'arg_list':([32,],[66,]),'compound_stmt':([63,96,126,127,134,135,136,],[88,103,103,103,103,103,103,]),'local_declarations':([89,],[93,]),'statement_list':([93,],[96,]),'statement':([96,126,127,134,135,136,],[101,130,131,137,138,139,]),'expression_stmt':([96,120,124,125,126,127,134,135,136,],[102,125,128,129,102,102,102,102,102,]),'return_stmt':([96,126,127,134,135,136,],[104,104,104,104,104,104,]),'if_stmt':([96,126,127,134,135,136,],[105,105,105,105,105,105,]),'while_stmt':([96,126,127,134,135,136,],[106,106,106,106,106,106,]),'for_stmt':([96,126,127,134,135,136,],[107,107,107,107,107,107,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',31),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',32),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',33),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',37),
  ('params -> param_list','params',1,'p_params','parser.py',41),
  ('params -> VOID','params',1,'p_params','parser.py',42),
  ('params -> empty','params',1,'p_params','parser.py',43),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',50),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',51),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',58),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',62),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',66),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',67),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',74),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',75),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',87),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',91),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',92),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',99),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',100),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',107),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',108),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',115),
  ('for_stmt -> FOR LPAREN var_declaration expression_stmt expression RPAREN statement','for_stmt',7,'p_for_stmt','parser.py',119),
  ('for_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement','for_stmt',7,'p_for_stmt','parser.py',120),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',127),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',128),
  ('var -> ID','var',1,'p_var','parser.py',135),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',139),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',140),
  ('relop -> LE','relop',1,'p_relop','parser.py',147),
  ('relop -> LT','relop',1,'p_relop','parser.py',148),
  ('relop -> GT','relop',1,'p_relop','parser.py',149),
  ('relop -> GE','relop',1,'p_relop','parser.py',150),
  ('relop -> EQ','relop',1,'p_relop','parser.py',151),
  ('relop -> NE','relop',1,'p_relop','parser.py',152),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',156),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',157),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',164),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',165),
  ('term -> term mulop factor','term',3,'p_term','parser.py',169),
  ('term -> factor','term',1,'p_term','parser.py',170),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',177),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',178),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',182),
  ('factor -> var','factor',1,'p_factor','parser.py',183),
  ('factor -> call','factor',1,'p_factor','parser.py',184),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',185),
  ('factor -> CHAR_LITERAL','factor',1,'p_factor','parser.py',186),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',193),
  ('args -> arg_list','args',1,'p_args','parser.py',197),
  ('args -> empty','args',1,'p_args','parser.py',198),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',202),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',203),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',210),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',224),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',225),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',226),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',227),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parser.py',228),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',229),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','parser.py',230),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',231),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',232),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',233),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',234),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',235),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',236),
]
