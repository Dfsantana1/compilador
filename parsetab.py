
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ FOR GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID ASSIGN expression SEMICOLONtype_specifier : INT\n                     | CHAR\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOID\n              | emptyparam_list : param\n                 | param_list COMMA paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmt\n                | while_stmt\n                | for_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementfor_stmt : FOR LPAREN var_declaration expression_stmt expression RPAREN statement\n                | FOR LPAREN expression_stmt expression_stmt expression RPAREN statementexpression : var ASSIGN expression\n                 | simple_expressionvar : IDsimple_expression : additive_expression relop additive_expression\n                        | additive_expressionrelop : LE\n             | LT\n             | GT\n             | GE\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                          | termaddop : PLUS\n             | MINUSterm : term mulop factor\n            | factormulop : TIMES\n             | DIVIDEfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBERcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,93,],[7,7,-2,-4,-5,-3,-6,7,-7,7,-11,-66,7,-19,-20,-18,7,]),'CHAR':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,93,],[8,8,-2,-4,-5,-3,-6,8,-7,8,-11,-66,8,-19,-20,-18,8,]),'VOID':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,93,],[9,9,-2,-4,-5,-3,-6,28,-7,9,-11,-66,9,-19,-20,-18,9,]),'$end':([1,2,3,4,5,10,12,32,61,73,],[0,-1,-2,-4,-5,-3,-6,-7,-11,-18,]),'ID':([6,7,8,9,12,13,22,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80,82,83,88,89,91,92,93,94,97,98,99,100,101,102,103,104,107,108,109,110,111,112,],[11,-8,-9,-10,-6,15,15,48,-10,15,-7,15,15,15,-43,-44,-45,-46,-47,-48,-51,-52,15,-55,-56,-66,15,-66,-19,15,-20,-21,87,-18,-22,-23,-24,-25,-26,-27,-28,-30,15,-29,-31,15,15,15,-32,15,15,15,15,15,15,-33,-35,15,15,15,-34,-36,-37,]),'SEMICOLON':([11,12,15,16,17,18,19,20,21,23,24,32,55,56,57,58,59,60,62,64,66,67,69,70,71,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,93,94,97,98,99,100,103,104,107,108,109,110,111,112,],[12,-6,-40,32,-58,-39,-42,-50,-54,-59,-60,-7,-38,-41,-58,-49,-53,-57,-66,-61,-66,-19,82,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,88,-30,89,12,-29,-31,94,82,-32,82,82,82,82,-33,-35,82,82,82,-34,-36,-37,]),'ASSIGN':([11,15,17,87,],[13,-40,33,13,]),'LPAREN':([11,12,13,15,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,73,74,75,76,77,78,79,80,82,83,84,85,86,88,89,91,92,93,94,97,98,99,100,101,102,103,104,107,108,109,110,111,112,],[14,-6,22,31,22,22,-7,22,22,22,-43,-44,-45,-46,-47,-48,-51,-52,22,-55,-56,-66,22,-66,-19,22,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,22,91,92,93,-29,-31,22,22,22,-32,22,22,22,22,22,22,-33,-35,22,22,22,-34,-36,-37,]),'RBRACE':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,103,104,110,111,112,],[-6,-7,-66,-66,-19,73,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,-33,-35,-34,-36,-37,]),'LBRACE':([12,32,49,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,99,100,103,104,107,108,109,110,111,112,],[-6,-7,62,-66,-66,-19,62,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,62,62,-33,-35,62,62,62,-34,-36,-37,]),'RETURN':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,99,100,103,104,107,108,109,110,111,112,],[-6,-7,-66,-66,-19,83,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,83,83,-33,-35,83,83,83,-34,-36,-37,]),'IF':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,99,100,103,104,107,108,109,110,111,112,],[-6,-7,-66,-66,-19,84,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,84,84,-33,-35,84,84,84,-34,-36,-37,]),'WHILE':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,99,100,103,104,107,108,109,110,111,112,],[-6,-7,-66,-66,-19,85,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,85,85,-33,-35,85,85,85,-34,-36,-37,]),'FOR':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,80,82,88,89,94,99,100,103,104,107,108,109,110,111,112,],[-6,-7,-66,-66,-19,86,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,86,86,-33,-35,86,86,86,-34,-36,-37,]),'NUMBER':([12,13,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,73,74,75,76,77,78,79,80,82,83,88,89,91,92,93,94,97,98,99,100,101,102,103,104,107,108,109,110,111,112,],[-6,24,24,24,-7,24,24,24,-43,-44,-45,-46,-47,-48,-51,-52,24,-55,-56,-66,24,-66,-19,24,-20,-21,-18,-22,-23,-24,-25,-26,-27,-28,-30,24,-29,-31,24,24,24,-32,24,24,24,24,24,24,-33,-35,24,24,24,-34,-36,-37,]),'RPAREN':([14,15,17,18,19,20,21,23,24,26,27,28,29,30,31,47,48,51,52,53,54,55,56,57,58,59,60,63,64,68,95,96,105,106,],[-66,-40,-58,-39,-42,-50,-54,-59,-60,49,-12,-13,-14,-15,-66,60,-17,64,-62,-63,-64,-38,-41,-58,-49,-53,-57,-16,-61,-65,99,100,108,109,]),'TIMES':([15,17,20,21,23,24,57,58,59,60,64,],[-40,-58,45,-54,-59,-60,-58,45,-53,-57,-61,]),'DIVIDE':([15,17,20,21,23,24,57,58,59,60,64,],[-40,-58,46,-54,-59,-60,-58,46,-53,-57,-61,]),'LE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,36,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'LT':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,37,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'GT':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,38,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'GE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,39,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'EQ':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,40,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'NE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-40,-58,41,-50,-54,-59,-60,-58,-49,-53,-57,-61,]),'PLUS':([15,17,19,20,21,23,24,56,57,58,59,60,64,],[-40,-58,42,-50,-54,-59,-60,42,-58,-49,-53,-57,-61,]),'MINUS':([15,17,19,20,21,23,24,56,57,58,59,60,64,],[-40,-58,43,-50,-54,-59,-60,43,-58,-49,-53,-57,-61,]),'COMMA':([15,17,18,19,20,21,23,24,27,30,48,52,54,55,56,57,58,59,60,63,64,68,],[-40,-58,-39,-42,-50,-54,-59,-60,50,-15,-17,65,-64,-38,-41,-58,-49,-53,-57,-16,-61,-65,]),'ELSE':([73,75,76,77,78,79,80,82,88,89,94,103,104,110,111,112,],[-18,-23,-24,-25,-26,-27,-28,-30,-29,-31,-32,107,-35,-34,-36,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,66,93,],[4,4,70,97,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,14,50,66,93,],[6,6,25,25,72,72,]),'expression':([13,22,31,33,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[16,47,54,55,68,81,90,95,96,81,81,81,81,81,105,106,81,81,81,]),'var':([13,22,31,33,34,35,44,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[17,17,17,17,57,57,57,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'simple_expression':([13,22,31,33,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'additive_expression':([13,22,31,33,34,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[19,19,19,19,56,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'term':([13,22,31,33,34,35,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[20,20,20,20,20,58,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'factor':([13,22,31,33,34,35,44,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[21,21,21,21,21,21,59,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'call':([13,22,31,33,34,35,44,65,69,83,91,92,93,97,98,99,100,101,102,107,108,109,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'params':([14,],[26,]),'param_list':([14,],[27,]),'empty':([14,31,62,66,],[29,53,67,71,]),'param':([14,50,],[30,63,]),'relop':([19,],[34,]),'addop':([19,56,],[35,35,]),'mulop':([20,58,],[44,44,]),'args':([31,],[51,]),'arg_list':([31,],[52,]),'compound_stmt':([49,69,99,100,107,108,109,],[61,76,76,76,76,76,76,]),'local_declarations':([62,],[66,]),'statement_list':([66,],[69,]),'statement':([69,99,100,107,108,109,],[74,103,104,110,111,112,]),'expression_stmt':([69,93,97,98,99,100,107,108,109,],[75,98,101,102,75,75,75,75,75,]),'return_stmt':([69,99,100,107,108,109,],[77,77,77,77,77,77,]),'if_stmt':([69,99,100,107,108,109,],[78,78,78,78,78,78,]),'while_stmt':([69,99,100,107,108,109,],[79,79,79,79,79,79,]),'for_stmt':([69,99,100,107,108,109,],[80,80,80,80,80,80,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',31),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',32),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',33),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',37),
  ('params -> param_list','params',1,'p_params','parser.py',41),
  ('params -> VOID','params',1,'p_params','parser.py',42),
  ('params -> empty','params',1,'p_params','parser.py',43),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',50),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',51),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',58),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',62),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',66),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',67),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',74),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',75),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',87),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',91),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',92),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',99),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',100),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',107),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',108),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',115),
  ('for_stmt -> FOR LPAREN var_declaration expression_stmt expression RPAREN statement','for_stmt',7,'p_for_stmt','parser.py',119),
  ('for_stmt -> FOR LPAREN expression_stmt expression_stmt expression RPAREN statement','for_stmt',7,'p_for_stmt','parser.py',120),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',127),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',128),
  ('var -> ID','var',1,'p_var','parser.py',135),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',139),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',140),
  ('relop -> LE','relop',1,'p_relop','parser.py',147),
  ('relop -> LT','relop',1,'p_relop','parser.py',148),
  ('relop -> GT','relop',1,'p_relop','parser.py',149),
  ('relop -> GE','relop',1,'p_relop','parser.py',150),
  ('relop -> EQ','relop',1,'p_relop','parser.py',151),
  ('relop -> NE','relop',1,'p_relop','parser.py',152),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',156),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',157),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',164),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',165),
  ('term -> term mulop factor','term',3,'p_term','parser.py',169),
  ('term -> factor','term',1,'p_term','parser.py',170),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',177),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',178),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',182),
  ('factor -> var','factor',1,'p_factor','parser.py',183),
  ('factor -> call','factor',1,'p_factor','parser.py',184),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',185),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',192),
  ('args -> arg_list','args',1,'p_args','parser.py',196),
  ('args -> empty','args',1,'p_args','parser.py',197),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',201),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',202),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',209),
]
