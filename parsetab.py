
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR CHAR_LITERAL COMMA DIVIDE ELSE EQ FOR GE GT ID IF INT LBRACE LBRACKET LE LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TIMES VOID WHILEprogram : declaration_listdeclaration_list : declaration\n                       | declaration_list declarationdeclaration : var_declaration\n                  | fun_declarationvar_declaration : type_specifier ID SEMICOLON\n                      | type_specifier ID ASSIGN expression SEMICOLONtype_specifier : INT\n                     | CHAR\n                     | VOIDfun_declaration : type_specifier ID LPAREN params RPAREN compound_stmtparams : param_list\n              | VOID\n              | emptyparam_list : param\n                 | param_list COMMA paramparam : type_specifier IDcompound_stmt : LBRACE local_declarations statement_list RBRACElocal_declarations : empty\n                         | local_declarations var_declarationstatement_list : empty\n                     | statement_list statementstatement : expression_stmt\n                | compound_stmt\n                | return_stmt\n                | if_stmt\n                | while_stmtexpression_stmt : expression SEMICOLON\n                      | SEMICOLONreturn_stmt : RETURN SEMICOLON\n                  | RETURN expression SEMICOLONif_stmt : IF LPAREN expression RPAREN statement\n               | IF LPAREN expression RPAREN statement ELSE statementwhile_stmt : WHILE LPAREN expression RPAREN statementexpression : var ASSIGN expression\n                 | simple_expressionvar : IDsimple_expression : additive_expression relop additive_expression\n                        | additive_expressionrelop : LE\n             | LT\n             | GT\n             | GE\n             | EQ\n             | NEadditive_expression : additive_expression addop term\n                          | termaddop : PLUS\n             | MINUSterm : term mulop factor\n            | factormulop : TIMES\n             | DIVIDEfactor : LPAREN expression RPAREN\n              | var\n              | call\n              | NUMBERcall : ID LPAREN args RPARENargs : arg_list\n            | emptyarg_list : expression\n                | arg_list COMMA expressionempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,],[7,7,-2,-4,-5,-3,-6,7,-7,7,-11,-63,7,-19,-20,-18,]),'CHAR':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,],[8,8,-2,-4,-5,-3,-6,8,-7,8,-11,-63,8,-19,-20,-18,]),'VOID':([0,2,3,4,5,10,12,14,32,50,61,62,66,67,70,73,],[9,9,-2,-4,-5,-3,-6,28,-7,9,-11,-63,9,-19,-20,-18,]),'$end':([1,2,3,4,5,10,12,32,61,73,],[0,-1,-2,-4,-5,-3,-6,-7,-11,-18,]),'ID':([6,7,8,9,12,13,22,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,72,73,74,75,76,77,78,79,81,82,86,87,89,90,91,94,95,96,97,98,99,],[11,-8,-9,-10,-6,15,15,48,-10,15,-7,15,15,15,-40,-41,-42,-43,-44,-45,-48,-49,15,-52,-53,-63,15,-63,-19,15,-20,-21,85,-18,-22,-23,-24,-25,-26,-27,-29,15,-28,-30,15,15,-31,15,15,-32,-34,15,-33,]),'SEMICOLON':([11,12,15,16,17,18,19,20,21,23,24,32,55,56,57,58,59,60,62,64,66,67,69,70,71,73,74,75,76,77,78,79,80,81,82,85,86,87,88,91,94,95,96,97,98,99,],[12,-6,-37,32,-55,-36,-39,-47,-51,-56,-57,-7,-35,-38,-55,-46,-50,-54,-63,-58,-63,-19,81,-20,-21,-18,-22,-23,-24,-25,-26,-27,86,-29,87,12,-28,-30,91,-31,81,81,-32,-34,81,-33,]),'ASSIGN':([11,15,17,85,],[13,-37,33,13,]),'LPAREN':([11,12,13,15,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,73,74,75,76,77,78,79,81,82,83,84,86,87,89,90,91,94,95,96,97,98,99,],[14,-6,22,31,22,22,-7,22,22,22,-40,-41,-42,-43,-44,-45,-48,-49,22,-52,-53,-63,22,-63,-19,22,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,22,89,90,-28,-30,22,22,-31,22,22,-32,-34,22,-33,]),'RBRACE':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,81,86,87,91,96,97,99,],[-6,-7,-63,-63,-19,73,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,-28,-30,-31,-32,-34,-33,]),'LBRACE':([12,32,49,62,66,67,69,70,71,73,74,75,76,77,78,79,81,86,87,91,94,95,96,97,98,99,],[-6,-7,62,-63,-63,-19,62,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,-28,-30,-31,62,62,-32,-34,62,-33,]),'RETURN':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,81,86,87,91,94,95,96,97,98,99,],[-6,-7,-63,-63,-19,82,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,-28,-30,-31,82,82,-32,-34,82,-33,]),'IF':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,81,86,87,91,94,95,96,97,98,99,],[-6,-7,-63,-63,-19,83,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,-28,-30,-31,83,83,-32,-34,83,-33,]),'WHILE':([12,32,62,66,67,69,70,71,73,74,75,76,77,78,79,81,86,87,91,94,95,96,97,98,99,],[-6,-7,-63,-63,-19,84,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,-28,-30,-31,84,84,-32,-34,84,-33,]),'NUMBER':([12,13,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,62,65,66,67,69,70,71,73,74,75,76,77,78,79,81,82,86,87,89,90,91,94,95,96,97,98,99,],[-6,24,24,24,-7,24,24,24,-40,-41,-42,-43,-44,-45,-48,-49,24,-52,-53,-63,24,-63,-19,24,-20,-21,-18,-22,-23,-24,-25,-26,-27,-29,24,-28,-30,24,24,-31,24,24,-32,-34,24,-33,]),'RPAREN':([14,15,17,18,19,20,21,23,24,26,27,28,29,30,31,47,48,51,52,53,54,55,56,57,58,59,60,63,64,68,92,93,],[-63,-37,-55,-36,-39,-47,-51,-56,-57,49,-12,-13,-14,-15,-63,60,-17,64,-59,-60,-61,-35,-38,-55,-46,-50,-54,-16,-58,-62,94,95,]),'TIMES':([15,17,20,21,23,24,57,58,59,60,64,],[-37,-55,45,-51,-56,-57,-55,45,-50,-54,-58,]),'DIVIDE':([15,17,20,21,23,24,57,58,59,60,64,],[-37,-55,46,-51,-56,-57,-55,46,-50,-54,-58,]),'LE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,36,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'LT':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,37,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'GT':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,38,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'GE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,39,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'EQ':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,40,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'NE':([15,17,19,20,21,23,24,57,58,59,60,64,],[-37,-55,41,-47,-51,-56,-57,-55,-46,-50,-54,-58,]),'PLUS':([15,17,19,20,21,23,24,56,57,58,59,60,64,],[-37,-55,42,-47,-51,-56,-57,42,-55,-46,-50,-54,-58,]),'MINUS':([15,17,19,20,21,23,24,56,57,58,59,60,64,],[-37,-55,43,-47,-51,-56,-57,43,-55,-46,-50,-54,-58,]),'COMMA':([15,17,18,19,20,21,23,24,27,30,48,52,54,55,56,57,58,59,60,63,64,68,],[-37,-55,-36,-39,-47,-51,-56,-57,50,-15,-17,65,-61,-35,-38,-55,-46,-50,-54,-16,-58,-62,]),'ELSE':([73,75,76,77,78,79,81,86,87,91,96,97,99,],[-18,-23,-24,-25,-26,-27,-29,-28,-30,-31,98,-34,-33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,66,],[4,4,70,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,14,50,66,],[6,6,25,25,72,]),'expression':([13,22,31,33,65,69,82,89,90,94,95,98,],[16,47,54,55,68,80,88,92,93,80,80,80,]),'var':([13,22,31,33,34,35,44,65,69,82,89,90,94,95,98,],[17,17,17,17,57,57,57,17,17,17,17,17,17,17,17,]),'simple_expression':([13,22,31,33,65,69,82,89,90,94,95,98,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'additive_expression':([13,22,31,33,34,65,69,82,89,90,94,95,98,],[19,19,19,19,56,19,19,19,19,19,19,19,19,]),'term':([13,22,31,33,34,35,65,69,82,89,90,94,95,98,],[20,20,20,20,20,58,20,20,20,20,20,20,20,20,]),'factor':([13,22,31,33,34,35,44,65,69,82,89,90,94,95,98,],[21,21,21,21,21,21,59,21,21,21,21,21,21,21,21,]),'call':([13,22,31,33,34,35,44,65,69,82,89,90,94,95,98,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'params':([14,],[26,]),'param_list':([14,],[27,]),'empty':([14,31,62,66,],[29,53,67,71,]),'param':([14,50,],[30,63,]),'relop':([19,],[34,]),'addop':([19,56,],[35,35,]),'mulop':([20,58,],[44,44,]),'args':([31,],[51,]),'arg_list':([31,],[52,]),'compound_stmt':([49,69,94,95,98,],[61,76,76,76,76,]),'local_declarations':([62,],[66,]),'statement_list':([66,],[69,]),'statement':([69,94,95,98,],[74,96,97,99,]),'expression_stmt':([69,94,95,98,],[75,75,75,75,]),'return_stmt':([69,94,95,98,],[77,77,77,77,]),'if_stmt':([69,94,95,98,],[78,78,78,78,]),'while_stmt':([69,94,95,98,],[79,79,79,79,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parser.py',6),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',10),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',11),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parser.py',18),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','parser.py',19),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','parser.py',23),
  ('var_declaration -> type_specifier ID ASSIGN expression SEMICOLON','var_declaration',5,'p_var_declaration','parser.py',24),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',31),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',32),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',33),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','parser.py',37),
  ('params -> param_list','params',1,'p_params','parser.py',41),
  ('params -> VOID','params',1,'p_params','parser.py',42),
  ('params -> empty','params',1,'p_params','parser.py',43),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',50),
  ('param_list -> param_list COMMA param','param_list',3,'p_param_list','parser.py',51),
  ('param -> type_specifier ID','param',2,'p_param','parser.py',58),
  ('compound_stmt -> LBRACE local_declarations statement_list RBRACE','compound_stmt',4,'p_compound_stmt','parser.py',62),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','parser.py',66),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','parser.py',67),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser.py',74),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',75),
  ('statement -> expression_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> compound_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> while_stmt','statement',1,'p_statement','parser.py',86),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','parser.py',90),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','parser.py',91),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',98),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',99),
  ('if_stmt -> IF LPAREN expression RPAREN statement','if_stmt',5,'p_if_stmt','parser.py',106),
  ('if_stmt -> IF LPAREN expression RPAREN statement ELSE statement','if_stmt',7,'p_if_stmt','parser.py',107),
  ('while_stmt -> WHILE LPAREN expression RPAREN statement','while_stmt',5,'p_while_stmt','parser.py',114),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','parser.py',118),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',119),
  ('var -> ID','var',1,'p_var','parser.py',126),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','parser.py',130),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parser.py',131),
  ('relop -> LE','relop',1,'p_relop','parser.py',138),
  ('relop -> LT','relop',1,'p_relop','parser.py',139),
  ('relop -> GT','relop',1,'p_relop','parser.py',140),
  ('relop -> GE','relop',1,'p_relop','parser.py',141),
  ('relop -> EQ','relop',1,'p_relop','parser.py',142),
  ('relop -> NE','relop',1,'p_relop','parser.py',143),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','parser.py',147),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','parser.py',148),
  ('addop -> PLUS','addop',1,'p_addop','parser.py',155),
  ('addop -> MINUS','addop',1,'p_addop','parser.py',156),
  ('term -> term mulop factor','term',3,'p_term','parser.py',160),
  ('term -> factor','term',1,'p_term','parser.py',161),
  ('mulop -> TIMES','mulop',1,'p_mulop','parser.py',168),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','parser.py',169),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',173),
  ('factor -> var','factor',1,'p_factor','parser.py',174),
  ('factor -> call','factor',1,'p_factor','parser.py',175),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',176),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','parser.py',183),
  ('args -> arg_list','args',1,'p_args','parser.py',187),
  ('args -> empty','args',1,'p_args','parser.py',188),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',192),
  ('arg_list -> arg_list COMMA expression','arg_list',3,'p_arg_list','parser.py',193),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',200),
]
